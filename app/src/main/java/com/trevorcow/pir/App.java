/*
 * This source file was generated by the Gradle 'init' task
 */
package com.trevorcow.pir;

import org.apache.commons.cli.*;
import org.objectweb.asm.ClassReader;
import org.objectweb.asm.ClassWriter;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.util.Arrays;
import java.util.Iterator;
import java.util.jar.JarEntry;
import java.util.jar.JarFile;
import java.util.jar.JarOutputStream;
import java.util.zip.ZipOutputStream;

public class App {

    public static byte[] patch_RsExecutableRunnerkt(InputStream clazzInputStream) throws IOException {
        ClassReader classReader = new ClassReader(clazzInputStream);
        ClassWriter classWriter = new ClassWriter(classReader, ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);

        PatchVisitor patchVisitor = new PatchVisitor(classWriter);
        classReader.accept(patchVisitor, 0);

        return classWriter.toByteArray();
    }

    static void createPatchedJar(File inputJarFile, File outputJarFile) throws IOException {


//        var input = new File("C:\\Dev\\IdeaProjects\\patch-intellij-rust\\app\\src\\main\\resources\\intellij-rust-243.22562.187.jar");
//        var output = new File("C:\\Dev\\IdeaProjects\\patch-intellij-rust\\app\\src\\main\\resources\\intellij-rust-243.22562.187-patched.jar");

        try (JarFile inputJar = new JarFile(inputJarFile)) {
            {
                JarEntry entry = inputJar.getJarEntry("org/rust/cargo/runconfig/RsExecutableRunner" + ".class");
                if (entry == null) {
                    System.err.println("Can't find RsExecutableRunner.class");
                    return;
                }
            }


            try (JarOutputStream jarOutputStream = new JarOutputStream(new FileOutputStream(outputJarFile))) {
                for (Iterator<JarEntry> it = inputJar.entries().asIterator(); it.hasNext(); ) {
                    JarEntry entry = it.next();

                    try (InputStream is = inputJar.getInputStream(entry)) {
                        jarOutputStream.putNextEntry(entry);

                        if (entry.getName().equals("org/rust/cargo/runconfig/RsExecutableRunner" + ".class")) {
                            byte[] patched_class = patch_RsExecutableRunnerkt(is);
                            jarOutputStream.write(patched_class);
                        } else {
                            jarOutputStream.write(is.readAllBytes());
                        }

                        jarOutputStream.closeEntry();
                    }
                }


            }


        }

    }

    public static void main(String[] args) throws IOException, ParseException {

        // Create Options object
        Options options = new Options();

        Option outputPathOption = Option.builder("o")
                .argName("outputPath")
                .hasArg()
                .numberOfArgs(1).type(Path.class)
                .build();

        // add t option
        options.addOption(outputPathOption);

        CommandLineParser parser = new DefaultParser();

        try {
            CommandLine cmd = parser.parse(options, args);

            File inputJarFile = new File(cmd.getArgs()[0]);
            File outputJarFile;
            if (cmd.hasOption("o")) {
                outputJarFile = new File(cmd.getOptionValue("o"));
            } else {
                Path outputPathParent = inputJarFile.toPath().getParent();

                int lastPeriod = inputJarFile.getName().lastIndexOf(".");
                String originalName = inputJarFile.getName().substring(0, lastPeriod);
                String originalExtension = inputJarFile.getName().substring(lastPeriod);
                String outputFileName = originalName + "-patched" + originalExtension;

                Path outputPath = outputPathParent.resolve(outputFileName);
                outputJarFile = outputPath.toFile();
            }

            System.out.println("inputJarFile=" + inputJarFile.getAbsolutePath());
            System.out.println("outputJarFile=" + outputJarFile.getAbsolutePath());

            createPatchedJar(inputJarFile, outputJarFile);
        } catch (ParseException e) {
            e.printStackTrace();
        }

    }
}